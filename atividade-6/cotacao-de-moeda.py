import requests
import datetime

def consultar_cotacao_final():
    """Consulta a cota√ß√£o de uma moeda em rela√ß√£o ao BRL usando Awesomeapi."""
    
    moeda_sigla = input("Digite a sigla da moeda para consulta (ex: USD, EUR): ").upper().strip()
    
    # Monta o par de moedas COM H√çFEN para a URL da API (ex: USD-BRL)
    PAR_URL = f"{moeda_sigla}-BRL"
    API_URL = f"https://economia.awesomeapi.com.br/json/last/{PAR_URL}"
    
    # Monta o nome da chave que vir√° no JSON de retorno (ex: USDBRL)
    PAR_CHAVE = f"{moeda_sigla}BRL"
    
    try:
        print(f"Buscando cota√ß√£o para {moeda_sigla} em rela√ß√£o ao Real (BRL)...")
        response = requests.get(API_URL, timeout=10)
        
        # Se a moeda n√£o existir, a API pode retornar 404, que ser√° capturado aqui.
        response.raise_for_status()
        
        dados = response.json()
        
        # Verifica se o par de moedas esperado est√° na resposta (USDBRL)
        if not dados or PAR_CHAVE not in dados:
            # Esta verifica√ß√£o agora √© mais robusta, mas o 404 j√° deve ter pego o erro.
            print("-" * 30)
            print(f"‚ùå **Erro:** A moeda **{moeda_sigla}** n√£o foi encontrada.")
            print("-" * 30)
            return
        
        cotacao = dados[PAR_CHAVE]
        
        # Formata a data de atualiza√ß√£o
        timestamp = int(cotacao.get('timestamp'))
        data_atualizacao = datetime.datetime.fromtimestamp(timestamp).strftime('%d/%m/%Y %H:%M:%S')

        print("-" * 30)
        print(f"üìà **Cota√ß√£o {moeda_sigla}/BRL:**")
        # Usamos .get() com um valor padr√£o para evitar erros caso alguma chave esteja faltando
        print(f"Valor Atual (Compra): R$ {float(cotacao.get('bid', 0)):.4f}")
        print(f"Valor M√°ximo (High): R$ {float(cotacao.get('high', 0)):.4f}")
        print(f"Valor M√≠nimo (Low): R$ {float(cotacao.get('low', 0)):.4f}")
        print(f"√öltima Atualiza√ß√£o: {data_atualizacao}")
        print("-" * 30)
        
    except requests.exceptions.RequestException as e:
        # Mensagem de falha gen√©rica para erros de conex√£o, timeout ou 404
        print("-" * 30)
        print(f"‚ùå **Falha na Conex√£o/Requisi√ß√£o:** N√£o foi poss√≠vel acessar a API.")
        print(f"Detalhes do erro: {e}")
        print("-" * 30)
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

# Chame a nova fun√ß√£o principal
if __name__ == "__main__":
    consultar_cotacao_final()